/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CloneableTypeA,
  CloneableTypeAInterface,
} from "../../../../contracts/interfaces/ICloneableServiceAccount.sol/CloneableTypeA";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tenant",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610976806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063439fab911461006f57806395d89b411461008b578063adf07791146100a9575b600080fd5b6100596100c7565b604051610066919061031b565b60405180910390f35b610089600480360381019061008491906103b6565b610155565b005b6100936101d7565b6040516100a0919061031b565b60405180910390f35b6100b1610265565b6040516100be9190610444565b60405180910390f35b600080546100d49061048e565b80601f01602080910402602001604051908101604052809291908181526020018280546101009061048e565b801561014d5780601f106101225761010080835404028352916020019161014d565b820191906000526020600020905b81548152906001019060200180831161013057829003601f168201915b505050505081565b60008060008484810190610169919061062d565b925092509250826000908161017e919061086e565b50816001908161018e919061086e565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b600180546101e49061048e565b80601f01602080910402602001604051908101604052809291908181526020018280546102109061048e565b801561025d5780601f106102325761010080835404028352916020019161025d565b820191906000526020600020905b81548152906001019060200180831161024057829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081519050919050565b600082825260208201905092915050565b60005b838110156102c55780820151818401526020810190506102aa565b60008484015250505050565b6000601f19601f8301169050919050565b60006102ed8261028b565b6102f78185610296565b93506103078185602086016102a7565b610310816102d1565b840191505092915050565b6000602082019050818103600083015261033581846102e2565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261037657610375610351565b5b8235905067ffffffffffffffff81111561039357610392610356565b5b6020830191508360018202830111156103af576103ae61035b565b5b9250929050565b600080602083850312156103cd576103cc610347565b5b600083013567ffffffffffffffff8111156103eb576103ea61034c565b5b6103f785828601610360565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061042e82610403565b9050919050565b61043e81610423565b82525050565b60006020820190506104596000830184610435565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806104a657607f821691505b6020821081036104b9576104b861045f565b5b50919050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104fc826102d1565b810181811067ffffffffffffffff8211171561051b5761051a6104c4565b5b80604052505050565b600061052e61033d565b905061053a82826104f3565b919050565b600067ffffffffffffffff82111561055a576105596104c4565b5b610563826102d1565b9050602081019050919050565b82818337600083830152505050565b600061059261058d8461053f565b610524565b9050828152602081018484840111156105ae576105ad6104bf565b5b6105b9848285610570565b509392505050565b600082601f8301126105d6576105d5610351565b5b81356105e684826020860161057f565b91505092915050565b60006105fa82610403565b9050919050565b61060a816105ef565b811461061557600080fd5b50565b60008135905061062781610601565b92915050565b60008060006060848603121561064657610645610347565b5b600084013567ffffffffffffffff8111156106645761066361034c565b5b610670868287016105c1565b935050602084013567ffffffffffffffff8111156106915761069061034c565b5b61069d868287016105c1565b92505060406106ae86828701610618565b9150509250925092565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261071a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106dd565b61072486836106dd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061076b6107666107618461073c565b610746565b61073c565b9050919050565b6000819050919050565b61078583610750565b61079961079182610772565b8484546106ea565b825550505050565b600090565b6107ae6107a1565b6107b981848461077c565b505050565b5b818110156107dd576107d26000826107a6565b6001810190506107bf565b5050565b601f821115610822576107f3816106b8565b6107fc846106cd565b8101602085101561080b578190505b61081f610817856106cd565b8301826107be565b50505b505050565b600082821c905092915050565b600061084560001984600802610827565b1980831691505092915050565b600061085e8383610834565b9150826002028217905092915050565b6108778261028b565b67ffffffffffffffff8111156108905761088f6104c4565b5b61089a825461048e565b6108a58282856107e1565b600060209050601f8311600181146108d857600084156108c6578287015190505b6108d08582610852565b865550610938565b601f1984166108e6866106b8565b60005b8281101561090e578489015182556001820191506020850194506020810190506108e9565b8683101561092b5784890151610927601f891682610834565b8355505b6001600288020188555050505b50505050505056fea264697066735822122034d21eef70f492c286223d26fba9968d01f4112d39efe5fbf9f3e80c14292b5164736f6c63430008140033";

type CloneableTypeAConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CloneableTypeAConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CloneableTypeA__factory extends ContractFactory {
  constructor(...args: CloneableTypeAConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CloneableTypeA> {
    return super.deploy(overrides || {}) as Promise<CloneableTypeA>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CloneableTypeA {
    return super.attach(address) as CloneableTypeA;
  }
  override connect(signer: Signer): CloneableTypeA__factory {
    return super.connect(signer) as CloneableTypeA__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CloneableTypeAInterface {
    return new utils.Interface(_abi) as CloneableTypeAInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CloneableTypeA {
    return new Contract(address, _abi, signerOrProvider) as CloneableTypeA;
  }
}
