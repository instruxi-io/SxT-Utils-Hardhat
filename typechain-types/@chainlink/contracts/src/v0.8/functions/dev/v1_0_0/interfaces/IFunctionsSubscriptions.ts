/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../../../common";

export declare namespace IFunctionsSubscriptions {
  export type ConsumerStruct = {
    allowed: PromiseOrValue<boolean>;
    initiatedRequests: PromiseOrValue<BigNumberish>;
    completedRequests: PromiseOrValue<BigNumberish>;
  };

  export type ConsumerStructOutput = [boolean, BigNumber, BigNumber] & {
    allowed: boolean;
    initiatedRequests: BigNumber;
    completedRequests: BigNumber;
  };

  export type SubscriptionStruct = {
    balance: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    blockedBalance: PromiseOrValue<BigNumberish>;
    proposedOwner: PromiseOrValue<string>;
    consumers: PromiseOrValue<string>[];
    flags: PromiseOrValue<BytesLike>;
  };

  export type SubscriptionStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string[],
    string
  ] & {
    balance: BigNumber;
    owner: string;
    blockedBalance: BigNumber;
    proposedOwner: string;
    consumers: string[];
    flags: string;
  };
}

export declare namespace FunctionsResponse {
  export type CommitmentStruct = {
    requestId: PromiseOrValue<BytesLike>;
    coordinator: PromiseOrValue<string>;
    estimatedTotalCostJuels: PromiseOrValue<BigNumberish>;
    client: PromiseOrValue<string>;
    subscriptionId: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    adminFee: PromiseOrValue<BigNumberish>;
    donFee: PromiseOrValue<BigNumberish>;
    gasOverheadBeforeCallback: PromiseOrValue<BigNumberish>;
    gasOverheadAfterCallback: PromiseOrValue<BigNumberish>;
    timeoutTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type CommitmentStructOutput = [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    requestId: string;
    coordinator: string;
    estimatedTotalCostJuels: BigNumber;
    client: string;
    subscriptionId: BigNumber;
    callbackGasLimit: number;
    adminFee: BigNumber;
    donFee: BigNumber;
    gasOverheadBeforeCallback: number;
    gasOverheadAfterCallback: number;
    timeoutTimestamp: number;
  };
}

export interface IFunctionsSubscriptionsInterface extends utils.Interface {
  functions: {
    "acceptSubscriptionOwnerTransfer(uint64)": FunctionFragment;
    "addConsumer(uint64,address)": FunctionFragment;
    "cancelSubscription(uint64,address)": FunctionFragment;
    "createSubscription()": FunctionFragment;
    "createSubscriptionWithConsumer(address)": FunctionFragment;
    "getConsumer(address,uint64)": FunctionFragment;
    "getFlags(uint64)": FunctionFragment;
    "getSubscription(uint64)": FunctionFragment;
    "getSubscriptionCount()": FunctionFragment;
    "getSubscriptionsInRange(uint64,uint64)": FunctionFragment;
    "getTotalBalance()": FunctionFragment;
    "oracleWithdraw(address,uint96)": FunctionFragment;
    "ownerCancelSubscription(uint64)": FunctionFragment;
    "pendingRequestExists(uint64)": FunctionFragment;
    "proposeSubscriptionOwnerTransfer(uint64,address)": FunctionFragment;
    "recoverFunds(address)": FunctionFragment;
    "removeConsumer(uint64,address)": FunctionFragment;
    "setFlags(uint64,bytes32)": FunctionFragment;
    "timeoutRequests((bytes32,address,uint96,address,uint64,uint32,uint72,uint72,uint40,uint40,uint32)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "cancelSubscription"
      | "createSubscription"
      | "createSubscriptionWithConsumer"
      | "getConsumer"
      | "getFlags"
      | "getSubscription"
      | "getSubscriptionCount"
      | "getSubscriptionsInRange"
      | "getTotalBalance"
      | "oracleWithdraw"
      | "ownerCancelSubscription"
      | "pendingRequestExists"
      | "proposeSubscriptionOwnerTransfer"
      | "recoverFunds"
      | "removeConsumer"
      | "setFlags"
      | "timeoutRequests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscriptionWithConsumer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsumer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlags",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionsInRange",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerCancelSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSubscriptionOwnerTransfer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlags",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeoutRequests",
    values: [FunctionsResponse.CommitmentStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscriptionWithConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionsInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerCancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFlags", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeoutRequests",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFunctionsSubscriptions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFunctionsSubscriptionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createSubscriptionWithConsumer(
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getConsumer(
      client: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IFunctionsSubscriptions.ConsumerStructOutput]>;

    getFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IFunctionsSubscriptions.SubscriptionStructOutput]>;

    getSubscriptionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSubscriptionsInRange(
      subscriptionIdStart: PromiseOrValue<BigNumberish>,
      subscriptionIdEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IFunctionsSubscriptions.SubscriptionStructOutput[]]>;

    getTotalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposeSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeoutRequests(
      requestsToTimeoutByCommitment: FunctionsResponse.CommitmentStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptSubscriptionOwnerTransfer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addConsumer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelSubscription(
    subscriptionId: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSubscription(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createSubscriptionWithConsumer(
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getConsumer(
    client: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IFunctionsSubscriptions.ConsumerStructOutput>;

  getFlags(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubscription(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IFunctionsSubscriptions.SubscriptionStructOutput>;

  getSubscriptionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getSubscriptionsInRange(
    subscriptionIdStart: PromiseOrValue<BigNumberish>,
    subscriptionIdEnd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IFunctionsSubscriptions.SubscriptionStructOutput[]>;

  getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  oracleWithdraw(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ownerCancelSubscription(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingRequestExists(
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposeSubscriptionOwnerTransfer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverFunds(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeConsumer(
    subscriptionId: PromiseOrValue<BigNumberish>,
    consumer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFlags(
    subscriptionId: PromiseOrValue<BigNumberish>,
    flags: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeoutRequests(
    requestsToTimeoutByCommitment: FunctionsResponse.CommitmentStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createSubscription(overrides?: CallOverrides): Promise<BigNumber>;

    createSubscriptionWithConsumer(
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConsumer(
      client: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IFunctionsSubscriptions.ConsumerStructOutput>;

    getFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IFunctionsSubscriptions.SubscriptionStructOutput>;

    getSubscriptionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionsInRange(
      subscriptionIdStart: PromiseOrValue<BigNumberish>,
      subscriptionIdEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IFunctionsSubscriptions.SubscriptionStructOutput[]>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposeSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeoutRequests(
      requestsToTimeoutByCommitment: FunctionsResponse.CommitmentStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createSubscriptionWithConsumer(
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getConsumer(
      client: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionsInRange(
      subscriptionIdStart: PromiseOrValue<BigNumberish>,
      subscriptionIdEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeoutRequests(
      requestsToTimeoutByCommitment: FunctionsResponse.CommitmentStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createSubscriptionWithConsumer(
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getConsumer(
      client: PromiseOrValue<string>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionsInRange(
      subscriptionIdStart: PromiseOrValue<BigNumberish>,
      subscriptionIdEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleWithdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ownerCancelSubscription(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingRequestExists(
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeSubscriptionOwnerTransfer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeConsumer(
      subscriptionId: PromiseOrValue<BigNumberish>,
      consumer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFlags(
      subscriptionId: PromiseOrValue<BigNumberish>,
      flags: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeoutRequests(
      requestsToTimeoutByCommitment: FunctionsResponse.CommitmentStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
